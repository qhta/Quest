// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quest.Data.QDM;

#nullable disable

namespace Quest.Migrations
{
    [DbContext(typeof(QuestQDMDbContext))]
    [Migration("20251018170031_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Quest.DocumentQuality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAssessed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectQualityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQualityId");

                    b.ToTable("DocumentQualities");
                });

            modelBuilder.Entity("Quest.ProjectQuality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectTitle")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectQualities");
                });

            modelBuilder.Entity("Quest.QualityFactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Colors")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectQualityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQualityId");

                    b.ToTable("QualityFactorType");
                });

            modelBuilder.Entity("Quest.QualityGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Meaning")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectQualityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQualityId");

                    b.ToTable("QualityGrade");
                });

            modelBuilder.Entity("Quest.QualityNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("QualityNodes");

                    b.HasDiscriminator().HasValue("QualityNode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quest.QualityMetricsNode", b =>
                {
                    b.HasBaseType("Quest.QualityNode");

                    b.Property<double?>("Value")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("QualityMetricsNode");
                });

            modelBuilder.Entity("Quest.QualityFactor", b =>
                {
                    b.HasBaseType("Quest.QualityMetricsNode");

                    b.Property<int>("DocumentQualityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FactorTypeId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DocumentQualityId");

                    b.HasIndex("FactorTypeId");

                    b.HasDiscriminator().HasValue("QualityFactor");
                });

            modelBuilder.Entity("Quest.DocumentQuality", b =>
                {
                    b.HasOne("Quest.ProjectQuality", null)
                        .WithMany("DocumentQualities")
                        .HasForeignKey("ProjectQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quest.QualityFactorType", b =>
                {
                    b.HasOne("Quest.ProjectQuality", null)
                        .WithMany("FactorTypes")
                        .HasForeignKey("ProjectQualityId");
                });

            modelBuilder.Entity("Quest.QualityGrade", b =>
                {
                    b.HasOne("Quest.ProjectQuality", null)
                        .WithMany("Scale")
                        .HasForeignKey("ProjectQualityId");
                });

            modelBuilder.Entity("Quest.QualityNode", b =>
                {
                    b.HasOne("Quest.QualityMetricsNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Quest.QualityFactor", b =>
                {
                    b.HasOne("Quest.DocumentQuality", "DocumentQuality")
                        .WithMany("Factors")
                        .HasForeignKey("DocumentQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quest.QualityFactorType", "FactorType")
                        .WithMany()
                        .HasForeignKey("FactorTypeId");

                    b.Navigation("DocumentQuality");

                    b.Navigation("FactorType");
                });

            modelBuilder.Entity("Quest.DocumentQuality", b =>
                {
                    b.Navigation("Factors");
                });

            modelBuilder.Entity("Quest.ProjectQuality", b =>
                {
                    b.Navigation("DocumentQualities");

                    b.Navigation("FactorTypes");

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("Quest.QualityMetricsNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
